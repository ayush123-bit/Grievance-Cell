<!DOCTYPE html>
<html lang="en">
<head>
  <style>
    select {
      width: 200px;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
      background-color: white;
      color: #333;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image: url('dropdown-arrow.png');
      background-position: right center;
      background-repeat: no-repeat;
      padding-right: 30px;
    }

    /* Adjust select size and font for mobile screens */
    @media (max-width: 600px) {
      select {
        width: 150px;
        font-size: 14px;
        padding: 8px;
      }
      h1 {
        font-size: 18px;
      }
    }

    /* Center and adjust chart container */
    .chart-container {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
      max-width: 90%; /* Makes chart larger by taking up more screen width */
      margin: 0 auto;
      height: 70vh; /* Height set to fill a significant portion of the screen */
    }

    /* Responsive canvas size */
    canvas {
      max-width: 100%;
      max-height: 100%;
      height: auto;
      width: auto;
      background-color: azure;
    }
  </style>
  
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body style="background-color: rgb(164, 214, 229);">
  <div class="chart-controls" style="text-align: center; padding: 10px;">
    <select id="state-select" onchange="filterGraph()">
      <option value="Academic">Academic</option>
      <option value="Administrative">Administrative</option>
      <option value="Faculty">Faculty</option>
      <option value="Financial">Financial</option>
      <option value="Technology">Technology</option>
      <option value="Facility and Infrastructure">Facility and Infrastructure</option>
      <option value="Internship and job">Internship and job</option>
      <option value="Safety">Safety</option>
    </select>

    <select id="state-graph" onchange="filter()">
      <option value="pie">Pie chart</option>
      <option value="bar">Bar</option>
      <option value="line">Line chart</option>
      <option value="doughnut">Doughnut chart</option>
    </select>
  </div>

  <div style="text-align: center;">
    <h1 style="display: inline;">Graph of complaints:</h1>
  </div>

  <div class="chart-container">
    <canvas id="chart"></canvas>
  </div>

  <script>
    let monthlyCounts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];

    const ctx = document.getElementById('chart').getContext('2d');

    const chart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        datasets: [{
          label: 'No of complaints',
          data: monthlyCounts,
          borderWidth: 1,
          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        aspectRatio: 1.25, // Larger aspect ratio for a bigger chart
        plugins: {
          legend: {
            display: true
          }
        },
        layout: {
          padding: 20
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    function filterGraph() {
      const select = document.getElementById('state-select');
      const selectedValue = select.value;

      fetch('/filterGraph', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ selectedValue })
      })
        .then(response => response.json())
        .then(data => {
          monthlyCounts = data.graphData;
          chart.data.datasets[0].data = monthlyCounts;
          chart.update();
        })
        .catch(error => console.error('Error:', error));
    }

    function filter() {
      const select = document.getElementById('state-graph');
      const selectedValue = select.value;

      fetch('/filter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ selectedValue })
      })
        .then(response => response.json())
        .then(data => {
          const chartType = typeof data === 'string' ? data : data.chartType || chart.config.type;
          chart.config.type = chartType;
          chart.update();
        })
        .catch(error => console.error('Error:', error));
    }

    // Adjust chart's aspect ratio based on screen width
    function adjustChartAspectRatio() {
      if (window.innerWidth <= 600) {
        chart.options.aspectRatio = 1; // Aspect ratio for mobile view
      } else {
        chart.options.aspectRatio = 3; // Aspect ratio for larger screens
      }
      chart.update();
    }

    // Initial adjustment and listen for window resizing
    adjustChartAspectRatio();
    window.addEventListener('resize', adjustChartAspectRatio);

  </script>
</body>
</html>
