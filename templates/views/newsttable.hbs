<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Complaints Table</title>
  <style>
    body {
      overflow: auto;
      font-family: 'Arial', sans-serif;
      background-color: #f8f8f8;
      margin: 0;
      padding: 0;
    }

    h2, h3 {
      color: #333;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      animation: fadeIn 0.5s ease-in-out;
    }

    th, td {
      border: 1px solid #ddd;
      padding: 15px;
      text-align: left;
    }

    th {
      background-color: black;
      color: white; /* Set text color to white */
    }

    th, td {
      text-align: center;
    }

   


    

    .btn {
      background-color: #4CAF50;
      color: white;
      padding: 20px 30px; /* Increased padding for bigger button */
      border: none;
      border-radius: 8px; /* Adjust border radius for a rounded button */
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin: 0 auto; /* Center the button horizontally */
      margin-top: 10px;
      display: block; /* Ensure the button takes full width */
    }
    .showComplaintBtn,.showActionBtn{
  background-color: #e8f3e8;
      color: rgb(39, 39, 41);
      padding: 9px 13px;
      border:2px solid black;
        font-size: 13px;
        font-weight: bold;
      border-radius: 12px;
      cursor: pointer;
      transition: background-color 0.3s ease;
}
.showComplaintBtn:hover{
   background-color: blue;
   color: white;
}
.showActionBtn:hover{
   background-color: blue;
   color: white;
}

    .btn:hover {
      background-color: #45a049;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    /* Add some button styles */
    .btn {
      background-color: #4CAF50; /* Green */
      border: 2px solid black; /* Black border */
      color: white;
      padding: 16px 32px;
      text-align: center;
      text-decoration: none;
      display: block;
      font-size: 16px;
      margin: 20px 5px; /* Center horizontally */
      transition-duration: 0.4s;
      cursor: pointer;
      border-radius: 12px;
    }

    .btn:hover {
      background-color: blue; /* Darker Green */
      color: white;
    }

    /* Hide form initially */
    #actionForm {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
    }

    #actionTextarea {
      width: 100%;
      height: 200px; /* Adjust textarea height */
      resize: none;
      padding: 10px;
      font-size: 16px;
      border-radius: 8px;
      border: 1px solid #ccc;
    }

    /* Styles for expanded table */
 .truncate {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 300px; /* Set maximum width as needed */
      cursor: pointer;
    }
    .btn:hover {
      background-color: #007bff;
    }

    #submitBtn {
      margin-top: 10px;
      font-size: 16px;
      left: 50px;
    }
     #sendEmailBtn{
      margin-top: 10px;
      
      background-color: rgb(255, 140, 0);
    }

    #actionForm {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
    }

    #actionTextarea {
      width: 700px;
      height: 200px; /* Adjust textarea height */
      resize: none;
      padding: 10px;
      font-size: 16px;
      border-radius: 8px;
      border: 1px solid #ccc;
    }

    /* Style for image link */
    .image-link {
      color: blue;
      text-decoration: underline;
      cursor: pointer;
    }
    .close:hover,
.close:focus {
  color: black;
}
.close {
  position: absolute;
  top: 5px;
  right: 10px;
  font-size: 24px;
  cursor: pointer;
  color: #aaa;
}

     tbody tr.satisfied-yes {
      background-color: green; /* Change background color for satisfied complaints */
      color: white; /* Set text color to white */
    }

    tbody tr.satisfied-no {
      background-color: red; /* Change background color for unsatisfied complaints */
      color: white; /* Set text color to white */
    }
     .styled-input {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  outline: none;
}

.styled-input:focus {
  border-color: #007bff;
}

   .search-container {
  display: flex;
  align-items: center; /* Align items vertically in the center */
  gap: 20px; /* Add space between elements */
}
    .btn-container {
      text-align: center;
      margin-top: 20px; /* Adjust margin as needed */
      display: flex;
      justify-content: center;

    }

.search-label {
  margin-right: 10px; /* Add some space between labels and input/select elements */
}

.styled-input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
  outline: none;
}

/* Adjust the width of the input and select elements as needed */
#dateFilter,
#categoryFilter,
#complainFilter {
  width: 150px;
}
 
.refresh-button {
  position: fixed;
  top: 50px;
  right: 10px;
  padding: 8px 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.refresh-button:hover {
  background-color: #0056b3;
}
.header-container {
  overflow: hidden;
  background-color: rgb(39, 39, 40); /* Blue background color */
  color:white; /* White text color */
  height: 30px; /* Adjust height as needed */
  font-family: serif;
  font-weight: bold;
}


.header-animation {
  position: relative;
  animation: slideFromRight 10s linear infinite; /* Adjust animation duration and timing as needed */
}

.header-text {
  position: absolute;
  top: 50%;
  right: -100px; /* Start position outside the view */
  font-size: 24px; /* Adjust font size as needed */
}

@keyframes slideFromRight {
  from {
    right: -100px; /* Start position outside the view */
  }
  to {
    right: 100%; /* End position at the end of the container */
  }
}
  .unsolved-no-action {
    background-color: red; /* Red background */
    color: white; /* White text */
  }

  /* Styles for unresolved complaints with 1 to 3 actions taken */
  .unsolved-action-taken {
    background-color: rgba(255, 255, 0, 0.849); /* Yellow background */
    color: black; /* Black text */
  }

  /* Styles for unresolved complaints with more than 3 actions taken */
  .unsolved-max-action {
    background-color: orange; /* Orange background */
    color: black; /* Black text */
  }

  /* Styles for satisfied complaints */
  .satisfied {
    background-color: green; /* Green background */
    color: white; /* White text */
  }
  
    .legend-container {
       /* Horizontally center the content */
      margin: 20px auto; /* Center the container horizontally */
      padding: 20px;
      background-color: #f0f0f0; /* Background color for the box */
      border: 1px solid #ccc; /* Border */
      border-radius: 8px; /* Rounded corners */
      width: fit-content; /* Adjust width based on content */
    }

    .legend-container h4 {
      margin-bottom: 10px; /* Add space below the title */
    }

    .legend-container ul {
      list-style-type: none; /* Remove bullet points */
      padding: 0;
    }

    .legend-container li {
      margin-bottom: 5px; /* Add space between list items */
    }

    .legend-container li span {
      display: inline-block;
      width: 20px; /* Width of the legend color box */
      height: 10px; /* Height of the legend color box */
      margin-right: 10px; /* Add space between color box and text */
    }

    /* Define colors for legend items */
    .satisfied-legend { background-color: green; }
    .unsolved-no-action-legend { background-color: red; }
    .unsolved-action-taken-legend { background-color: yellow; }
    .unsolved-max-action-legend { background-color: orange; }

.header-container {
  overflow: hidden;
  background-color: rgb(39, 39, 40); /* Blue background color */
  color:white; /* White text color */
  height: 30px; /* Adjust height as needed */
  font-family: serif;
  font-weight: bold;
}

.header-animation {
  position: relative;
  animation: slideFromRight 10s linear infinite; /* Adjust animation duration and timing as needed */
}

.header-text {
  position: absolute;
  top: 50%;
  right: -100px; /* Start position outside the view */
  font-size: 24px; /* Adjust font size as needed */
}

@keyframes slideFromRight {
  from {
    right: -100px; /* Start position outside the view */
  }
  to {
    right: 100%; /* End position at the end of the container */
  }
}
.log-button {
  position: fixed;
  top: 35px;
  right: 10px;
  padding: 8px 15px;
  background-color: #abcdf2;
  color: black;
  border: 2px solid black;
  border-radius: 5px;
  cursor: pointer;
}
.complaintContent {
  display: none;
  overflow: auto; /* Allow scrolling if content exceeds container height */
  max-height: 300px; /* Set maximum height to control expansion */
}
.actionContent {
  display: none;
  overflow: auto; /* Allow scrolling if content exceeds container height */
  max-height: 300px; /* Set maximum height to control expansion */
}
h2{
  text-align: center;
}

 

  </style>
</head>
<body>

    <div class="header-container">
    <div class="header-animation">
      <span class="header-text">UNITED  COLLEGE  ENGINEERING  AND  RESEARCH</span>
    </div>
  </div>
  <button  class="log-button" onclick="window.location.href='/'">Log out</button> 
  
<div class="legend-container">
    <h4>Color decoding:</h4>
    <ul>
      <li><span class="satisfied-legend"></span> Satisfied Complaints:<b>Green</b></li>
      <li><span class="unsolved-no-action-legend"></span> Unresolved Complaints (No Action Taken):<b>Red</b></li>
      <li><span class="unsolved-action-taken-legend"></span> Unresolved Complaints (1-3 Actions Taken):<b>Yellow</b></li>
      <li><span class="unsolved-max-action-legend"></span> Unresolved Complaints (More than 3 Actions Taken):<b>Orange</b></li>
    </ul>
  </div>
  {{#each complaints}}
    <h3 id="studentInfo">{{name}} - Student ID: {{studentId}}</h3>
     
  <h2 id="totalComplaints">Total Complains:54</h2>
    <table id="complaintsTable" class="truncate-table">
      <thead>
        <tr>
          <th>Complaint</th>
          
          <th>Category</th>
          <th>Date</th>
          <th>Action Taken</th>
          <th>Feedback</th>
          <th>Satisfied</th>
<!-- Added column for Image -->
        </tr>
      </thead>
      <tbody>
        {{#each complains}}
           <tr class="{{formatSatisfied satisfied actionTaken.length}}">
                         <td class="truncate">
  <!-- Button to toggle complaint content -->
  <button class="showComplaintBtn">Show Complaint</button>
  <div class="complaintContent" style="display: none;">
    <!-- Complaint content -->
    <span>{{complain}}</span>
 {{#if sortedcomplaint.url}}
      <p class="image-link" data-image-url="images/{{url}}">View Image</p>
    {{/if}}
 </div>
</td>
            <td class="truncate">{{category}}</td>
            <td class="truncate">{{formatDate date}}</td>
<td class="truncate">
  {{#if actionTaken.length}}
    <!-- Button to toggle action taken content -->
    <button class="showActionBtn">Show Action</button>
    <div class="actionContent" style="display: none;">
      <!-- Action taken content -->
      {{#each actionTaken}}
        <div>
          Action {{increment @index}}: {{this.action}}
          {{#if this.url2}}  
         <p>URL {{increment @index}}: <span class="image-link" data-image-url="images/{{this.url2}}">View image</span></p> 
          {{/if}} 
        <p> Date {{increment @index}}: {{formatDate this.date}} </p>
        
        </div>
        <hr>
      {{/each}}
    </div>
  {{else}}
    Not Taken
  {{/if}}
</td>
            <td class="truncate">{{feedback}}</td>
            <td class="truncate">{{satisfied}}</td>

          </tr>
        {{/each}}
      </tbody>
    </table>
  {{/each}}

 

  <script>
       const showComplaintBtns = document.querySelectorAll('.showComplaintBtn');
  showComplaintBtns.forEach(btn => {
    btn.addEventListener('click', function () {
      // Find the closest complaint content div within the same row
      const complaintContent = this.parentElement.querySelector('.complaintContent');
      // Toggle visibility of complaint content
      complaintContent.style.display = complaintContent.style.display === 'none' ? 'block' : 'none';
    });
  });

     const showActionBtns = document.querySelectorAll('.showActionBtn');
  showActionBtns.forEach(btn => {
    btn.addEventListener('click', function () {
      // Find the closest action content div within the same row
      const actionContent = this.parentElement.querySelector('.actionContent');
      // Toggle visibility of action content
      actionContent.style.display = actionContent.style.display === 'none' ? 'block' : 'none';
    });
  });

  // Add event listener to the table rows
document.querySelectorAll('#complaintsTable tbody tr').forEach(row => {
    // Get the feedback and satisfied cells
    const feedbackCell = row.querySelector('td:nth-child(5)');
    const satisfiedCell = row.querySelector('td:nth-child(6)');
    const complaintContent = row.querySelector('td:first-child .complaintContent span').textContent.trim();
    const complaintDate = row.querySelector('td:nth-child(3)').textContent.trim();
    const complaintId = row.getAttribute('data-complaint-id'); // Assuming you have a unique identifier for each complaint row
      const feedback = row.querySelector('td:nth-child(5)').textContent.trim();
    const satisfied = row.querySelector('td:nth-child(6)').textContent.trim();
    // Function to handle fetch request
    

    // Add click event listener to feedback cell
    feedbackCell.addEventListener('click', () => {
     if(satisfied!="Yes"){
window.location.href = `/direct1?complaint=${encodeURIComponent(complaintContent)}&date=${encodeURIComponent(complaintDate)}`;
  } 
        else{
          alert("Already positive feedback provided.")
        }

    });
    
    // Add click event listener to satisfied cell
    satisfiedCell.addEventListener('click', () => {
      if(satisfied!="Yes"){
window.location.href = `/direct1?complaint=${encodeURIComponent(complaintContent)}&date=${encodeURIComponent(complaintDate)}`;
  } 
        else{
          alert("Already positive feedback provided.")
        }
   });
});

  function updateTotalComplaints() {
    // Get the table body
    const tableBody = document.querySelector('#complaintsTable tbody');
    
    // Get all rows in the table body
    const rows = tableBody.querySelectorAll('tr');
    
    // Initialize a counter for visible rows
    let visibleRowCount = 0;
    
    // Loop through each row and check if it's visible
    rows.forEach(row => {
      if (row.style.display !== 'none') {
        visibleRowCount++;
      }
    });
    
    // Update the total complaints heading with the visible row count
    const totalComplaintsHeading = document.querySelector('#totalComplaints');
    totalComplaintsHeading.textContent = `Total Complaints: ${visibleRowCount}`;
  }

  // Call the function initially to set the correct total complaints count
  updateTotalComplaints();



  </script>
</body>
</html>
